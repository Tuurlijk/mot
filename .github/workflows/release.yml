name: Release

on:
  release:
    types: [created]

jobs:
  build-binaries:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_path: target/x86_64-unknown-linux-gnu/release/mot
            asset_name: mot-linux-x86_64
          
          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_path: target/aarch64-unknown-linux-gnu/release/mot
            asset_name: mot-linux-arm64
            use_cross: true
          
          - name: Linux MUSL x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_path: target/x86_64-unknown-linux-musl/release/mot
            asset_name: mot-linux-musl-x86_64
          
          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_path: target/x86_64-pc-windows-msvc/release/mot.exe
            asset_name: mot-windows-x86_64
          
          - name: macOS x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            binary_path: target/x86_64-apple-darwin/release/mot
            asset_name: mot-macos-x86_64
          
          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            binary_path: target/aarch64-apple-darwin/release/mot
            asset_name: mot-macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: extract-version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_NUM=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Cross
        if: matrix.use_cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      
      - name: Set up Cross for ARM builds
        if: matrix.use_cross
        run: |
          echo "[target.${{ matrix.target }}]" > Cross.toml
          echo "linker = 'gcc'" >> Cross.toml
      
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Build binary
        shell: bash
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target=${{ matrix.target }}
          else
            cargo build --release --target=${{ matrix.target }}
          fi
      
      - name: Create tarball
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir release
          cp ${{ matrix.binary_path }} release/
          cp LICENSE README.md release/
          cd release
          tar czf ../${{ matrix.asset_name }}.tar.gz *
          cd ..
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
      
      - name: Create zip (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir release
          cp ${{ matrix.binary_path }} release/
          cp LICENSE README.md release/
          cd release
          7z a -tzip ../${{ matrix.asset_name }}.zip *
          cd ..
          certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.zip.sha256
          # Cleanup the certutil output to just the hash
          sed -i -e '1d' -e '3d' ${{ matrix.asset_name }}.zip.sha256
      
      - name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.asset_name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
            ${{ matrix.asset_name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cargo-publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check if crate exists
        id: check_crate
        run: |
          VERSION=${{ github.ref_name }}
          VERSION="${VERSION#v}"
          EXISTS=$(cargo search mot --limit 1 | grep -c "mot = \"$VERSION\"" || true)
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
      
      - name: Publish crate
        if: steps.check_crate.outputs.exists == '0'
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # docker-publish:
  #   name: Publish Docker image
  #   runs-on: ubuntu-latest
  #   needs: cargo-publish
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
      
  #     - name: Extract metadata for Docker
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: tuurlijk/mot
  #         tags: |
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=raw,value=latest,enable=${{ github.ref == format('refs/tags/{0}', github.event.repository.default_branch) }}
      
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
      
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
      
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max 