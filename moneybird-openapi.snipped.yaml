openapi: 3.0.3
info:
  title: Moneybird OpenAPI spec
  version: v2
  description: 'OpenAPI spec for Moneybird: https://developer.moneybird.com/'
servers:
- url: https://moneybird.com/api/v2/
  description: Moneybird API url
- url: http://localhost:3000/api/v2
  description: CORS issues workaround url
paths:
  /administrations:
    summary: Administrations
    get:
      summary: List all administrations
      description: This endpoint returns all administrations associated with the account
      operationId: getAdministrations
      tags:
      - administrations
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Administration'
  /{administrationId}/contacts:
    summary: Contacts
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    get:
      summary: Retrieve all contacts
      operationId: getContacts
      tags:
      - contacts
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        required: false
        description: The page number to retrieve (for pagination)
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 100
        required: false
        description: The number of contacts per page (max 100)
      - in: query
        name: query
        schema:
          type: string
        required: false
        description: A search query to filter contacts by name, email, or other searchable fields
      - in: query
        name: include_archived
        schema:
          type: boolean
          default: false
        required: false
        description: Include archived contacts
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactRead'
          description: List of contacts
    post:
      summary: Create a new contact
      operationId: createContact
      tags:
      - contacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactRead'
          description: The created contact
  /{administrationId}/contacts/{contactId}:
    summary: Contact
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    - in: path
      required: true
      name: contactId
      schema:
        type: string
      description: The contact you want to retrieve
    get:
      summary: Get contact
      operationId: getContact
      tags:
      - contacts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactRead'
          description: The requested contact
    patch:
      summary: Update a contact
      operationId: updateContact
      tags:
      - contacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactRead'
          description: The updated contact
    delete:
      summary: Delete a contact
      operationId: deleteContact
      tags:
      - contacts
      responses:
        '204':
          description: Contact successfully deleted
        '404':
          description: Contact not found
  /{administrationId}/projects:
    summary: Projects
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    get:
      summary: Retrieve all projects
      operationId: getProjects
      tags:
      - projects
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        required: false
        description: The page number to retrieve (for pagination)
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 100
        required: false
        description: The number of projects per page (max 100)
      - in: query
        name: filter
        schema:
          type: string
          enum:
          - state:all
          - state:archived
          - state:active
        required: false
        description: 'The filter argument allows you to filter on the list of documents. Filters are a combination of keys and values, separated by a comma: key:value,key2:value2. The most common filter method will be period: period:this_month. Filtering works the same as in the web application, for more advanced examples, change the filtering in the web application and learn from the resulting URI.'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRead'
          description: List of projects
    post:
      summary: Create a new project
      operationId: createProject
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRead'
          description: The created project
  /{administrationId}/projects/{projectId}:
    summary: Project
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    - in: path
      required: true
      name: projectId
      schema:
        type: string
      description: The id of the project you want to retrieve
    get:
      summary: Get project
      operationId: getProject
      tags:
      - projects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRead'
          description: The requested project
    patch:
      summary: Update a project
      operationId: updateProject
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRead'
          description: The updated project
    delete:
      summary: Delete a project
      operationId: deleteProject
      tags:
      - projects
      responses:
        '204':
          description: Project successfully deleted
        '404':
          description: Project not found
  /{administrationId}/time_entries:
    summary: TimeEntries
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    get:
      summary: Retrieve all time entries
      operationId: getTimeEntries
      tags:
      - time_entries
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
        required: false
        description: The page number to retrieve (for pagination)
      - in: query
        name: per_page
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 100
        required: false
        description: The number of time_entries per page (max 100)
      - in: query
        name: filter
        schema:
          type: string
        required: false
        description: 'The filter argument allows you to filter the list of time entries. Filters are a combination of keys and values, separated by a comma: period:this_year,state:all. See API documentation for more info'
      - in: query
        name: query
        schema:
          type: string
        required: false
        description: Allows filtering by time entry description.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeEntryRead'
          description: List of time entries
    post:
      summary: Create a new time entry
      operationId: createTimeEntry
      tags:
      - time_entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryRead'
          description: The created time entry
  /{administrationId}/time_entries/{timeEntryId}:
    summary: TimeEntry
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    - in: path
      required: true
      name: timeEntryId
      schema:
        type: string
      description: The id of the time entry you want to retrieve
    get:
      summary: Get time entry
      operationId: getTimeEntry
      tags:
      - time_entries
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryRead'
          description: The requested time_entry
    patch:
      summary: Update a time entry
      operationId: updateTimeEntry
      tags:
      - time_entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryRead'
          description: The updated time_entry
    delete:
      summary: Delete a time entry
      operationId: deleteTimeEntry
      tags:
      - time_entries
      responses:
        '204':
          description: TimeEntry successfully deleted
        '404':
          description: TimeEntry not found
  /{administrationId}/users:
    summary: Users
    parameters:
    - in: path
      required: true
      name: administrationId
      schema:
        type: string
      description: The administration you want to access
    get:
      summary: List all users
      description: This endpoint returns all users associated with the account. Optionally, accountants can be included by setting the include_accountants parameter to true.
      operationId: getUsers
      tags:
      - users
      parameters:
      - in: query
        name: include_accountants
        schema:
          type: boolean
          default: false
        required: false
        description: Include accountants in the list of users if set to true.
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    Administration:
      description: Object describing an administration.
      type: object
      properties:
        id:
          type: string
          description: The ID of the administration.
        name:
          type: string
          description: The name of the administration.
        language:
          type: string
          description: The language of the administration.
        currency:
          type: string
          description: The currency used in the administration.
        country:
          type: string
          description: The country of the administration.
        time_zone:
          type: string
          description: The timezone of the administration.
        access:
          type: string
          description: The access level of the current user to the administration.
    Contact:
      description: Object which describes a contact.
      type: object
      properties:
        id:
          type: string
          description: The ID of the contact.
        company_name:
          type: string
          description: A contact requires a non-blank company_name, firstname or lastname.
        address1:
          type: string
        address2:
          type: string
        zipcode:
          type: string
        city:
          type: string
        country:
          type: string
          description: ISO two-character country code, e.g. NL or DE.
        phone:
          type: string
        delivery_method:
          type: string
          description: Can be Email, Simplerinvoicing, Post or Manual.
        customer_id:
          type: string
          description: Will be assigned automatically if empty. Should be unique for the administration.
        tax_number:
          type: string
        firstname:
          type: string
          description: A contact requires a non-blank company_name, firstname or lastname.
        lastname:
          type: string
          description: A contact requires a non-blank company_name, firstname or lastname.
        chamber_of_commerce:
          type: string
        bank_account:
          type: string
        send_invoices_to_attention:
          type: string
        send_invoices_to_email:
          type: string
          description: Should be one or more valid email addresses, separated by a comma.
        send_estimates_to_attention:
          type: string
        send_estimates_to_email:
          type: string
          description: Should be one or more valid email addresses, separated by a comma.
        sepa_active:
          type: boolean
          description: When true, all other SEPA fields are required.
        sepa_iban:
          type: string
          description: Should be a valid IBAN.
        sepa_iban_account_name:
          type: string
        sepa_bic:
          type: string
          description: Should be a valid BIC.
        sepa_mandate_id:
          type: string
        sepa_mandate_date:
          type: string
          description: Should be a date in the past.
        sepa_sequence_type:
          type: string
          description: Can be RCUR, FRST, OOFF or FNAL.
        si_identifier_type:
          type: string
          description: Can be 0002, 0007, 0009, 0037, 0060, 0088, 0096, 0097, 0106, 0130, 0135, 0142, 0151, 0183, 0184, 0190, 0191, 0192, 0193, 0195, 0196, 0198, 0199, 0200, 0201, 0202, 0204, 0208, 0209, 9901, 9902, 9904, 9905, 9906, 9907, 9908, 9909, 9910, 9912, 9913, 9914, 9915, 9917, 9918, 9919, 9920, 9921, 9922, 9923, 9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957 or 9958.
        si_identifier:
          type: string
        invoice_workflow_id:
          type: string
          description: Should be a valid invoice workflow id.
        estimate_workflow_id:
          type: string
          description: Should be a valid estimate workflow id.
        email_ubl:
          type: boolean
        direct_debit:
          type: boolean
    ContactUpdate:
      description: Object for when updating contacts.
      allOf:
      - $ref: '#/components/schemas/Contact'
      - type: object
        properties:
          custom_fields_attributes:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                value:
                  type: string
    ContactCreate:
      description: Object for when creating contacts.
      allOf:
      - $ref: '#/components/schemas/ContactUpdate'
      - type: object
        properties:
          contact_person:
            type: array
            items:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
      example:
        company_name: Test company
        firstname: Dennis
        lastname: DEMO
        address1: Test street 1
        address2: ''
        zipcode: 1234 AB
        city: ''
        country: NL
        phone: ''
        delivery_method: Email
        customer_id: '6'
        tax_number: ''
        chamber_of_commerce: ''
        bank_account: NL90INGB0001234657
        email_ubl: true
        send_invoices_to_attention: ''
        send_invoices_to_email: example@example.com
        send_estimates_to_attention: ''
        send_estimates_to_email: example@example.com
        sepa_active: false
        sepa_iban: NL90INGB0001234567
        sepa_iban_account_name: Dennis DEMO
        sepa_bic: INGBNL2A
        sepa_mandate_id: DEMO123
        sepa_mandate_date: 2020-09-30
        sepa_sequence_type: RCUR
        si_identifier: ''
        direct_debit: false
        custom_fields_attributes:
        - id: 12345678901234
          value: testing
    ContactRead:
      description: Object for when reading contacts.
      allOf:
      - $ref: '#/components/schemas/Contact'
      - type: object
        properties:
          id:
            type: string
          administration_id:
            type: string
          notes:
            type: array
            items:
              $ref: '#/components/schemas/Note'
          custom_fields:
            type: array
            items:
              $ref: '#/components/schemas/CustomField'
          contact_people:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                administration_id:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                department:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                version:
                  type: integer
          archived:
            type: boolean
          events:
            type: array
            items:
              $ref: '#/components/schemas/Event'
      example:
        id: '387348560989914801'
        administration_id: '412839047230990'
        company_name: Foobar Holding B.V.
        firstname: null
        lastname: Appleseed
        address1: Hoofdstraat 12
        address2: ''
        zipcode: 1234 AB
        city: Amsterdam
        country: NL
        phone: ''
        delivery_method: Email
        customer_id: '1'
        tax_number: ''
        chamber_of_commerce: ''
        bank_account: ''
        attention: ''
        email: info@example.com
        email_ubl: true
        send_invoices_to_attention: ''
        send_invoices_to_email: info@example.com
        send_estimates_to_attention: ''
        send_estimates_to_email: info@example.com
        sepa_active: false
        sepa_iban: ''
        sepa_iban_account_name: ''
        sepa_bic: ''
        sepa_mandate_id: ''
        sepa_mandate_date: null
        sepa_sequence_type: RCUR
        credit_card_number: ''
        credit_card_reference: ''
        credit_card_type: null
        tax_number_validated_at: null
        tax_number_valid: null
        invoice_workflow_id: null
        estimate_workflow_id: null
        si_identifier: ''
        si_identifier_type: null
        moneybird_payments_mandate: false
        created_at: 2023-05-09T09:26:35.832Z
        updated_at: 2023-05-09T09:26:35.852Z
        version: 1683624395
        sales_invoices_url: https://moneybird.dev/123/sales_invoices/2d977c4c1ec0f1e7feff0df2b0411a3a4960e29a5bc785bfe30dd974ca9a2e10/all
        notes: []
        custom_fields: []
        contact_people:
        - id: 387348560997254835
          administration_id: '412839047230990'
          firstname: John
          lastname: Appleseed
          phone: null
          email: null
          department: null
          created_at: 2023-05-09T09:26:35.840Z
          updated_at: 2023-05-09T09:26:35.840Z
          version: 1683624395
        archived: false
        events:
        - administration_id: '412839047230990'
          user_id: 16836243678565
          action: contact_created
          link_entity_id: null
          link_entity_type: null
          data: {}
          created_at: 2023-05-09T09:26:35.847Z
          updated_at: 2023-05-09T09:26:35.847Z
    CustomField:
      type: object
      properties:
        id:
          type: string
        administration_id:
          type: string
        name:
          type: string
        source:
          type: string
    Project:
      type: object
      description: Object which describes a project
      properties:
        id:
          type: string
        name:
          type: string
        state:
          type: string
        budget:
          type: number
    ProjectCreate:
      description: Object for creating a project
      type: object
      required:
      - project
      properties:
        project:
          type: object
          required:
          - name
          - budget
          properties:
            name:
              type: string
            budget:
              type: number
    ProjectRead:
      description: Object for when reading projects
      allOf:
      - $ref: '#/components/schemas/Project'
      - type: object
        properties:
          id:
            type: string
          name:
            type: string
          state:
            type: string
          budget:
            type: number
      example:
        id: '446241767953532430'
        name: Project Blackbird
        state: archived
        budget: 10
    ProjectUpdate:
      description: Object for when updating projects.
      allOf:
      - $ref: '#/components/schemas/Project'
    Event:
      type: object
      properties:
        administration_id:
          type: string
        user_id:
          type: string
        action:
          type: string
        link_entity_id:
          type: string
          nullable: true
        link_entity_type:
          type: string
          nullable: true
        data:
          type: object
        created_at:
          type: string
        updated_at:
          type: string
    Note:
      type: object
      properties:
        id:
          type: string
        administration_id:
          type: string
        entity_id:
          type: string
        entity_type:
          type: string
        user_id:
          type: string
        assignee_id:
          type: string
          nullable: true
        todo:
          type: boolean
        note:
          type: string
          nullable: true
        completed_at:
          type: string
          nullable: true
        completed_by_id:
          type: string
          nullable: true
        todo_type:
          type: string
        data:
          type: object
        created_at:
          type: string
        updated_at:
          type: string
    TimeEntry:
      type: object
      description: Object which describes a time entry
      properties:
        id:
          type: string
        administration_id:
          type: string
        contact_id:
          type: string
        project_id:
          type: string
        user_id:
          type: string
        description:
          type: string
        paused_duration:
          type: number
        billable:
          type: boolean
        started_at:
          type: string
        ended_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        contact:
          $ref: '#/components/schemas/Contact'
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
          nullable: true
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        id: '446241830577636389'
        administration_id: 123
        contact_id: '446241830553519137'
        project_id: '446241830564004899'
        user_id: 17397890963220
        started_at: 2025-02-17T10:49:00.000Z
        ended_at: 2025-02-17T11:49:00.000Z
        description: Test
        paused_duration: 0
        billable: true
        created_at: 2025-02-17T10:49:54.448Z
        updated_at: 2025-02-17T10:49:54.448Z
        contact:
          id: '446241830553519137'
          firstname: ''
          lastname: ''
          company_name: Foobar Holding B.V.
        detail: null
        user:
          id: 17397890963220
          name: Moneybird
          created_at: 2025-02-17T10:44:56.885Z
          updated_at: 2025-02-17T10:44:57.120Z
        project:
          id: '446241830564004899'
          name: My project name
          state: active
          budget: 10
        events:
        - administration_id: 123
          user_id: 17397890963220
          action: time_entry_created
          link_entity_id: null
          link_entity_type: null
          data: {}
          created_at: 2025-02-17T10:49:54.450Z
          updated_at: 2025-02-17T10:49:54.450Z
        notes: []
    TimeEntryRead:
      description: Object for when reading time entries
      allOf:
      - $ref: '#/components/schemas/TimeEntry'
    TimeEntryUpdate:
      description: Object for updating time entries
      type: object
      required:
      - time_entry
      properties:
        time_entry:
          allOf:
          - $ref: '#/components/schemas/TimeEntry'
          - type: object
            required:
            - ended_at
            properties:
              user_id:
                type: string
              started_at:
                type: string
              ended_at:
                type: string
              description:
                type: string
              contact_id:
                type: string
              project_id:
                type: string
              detail_id:
                type: string
              billable:
                type: boolean
              paused_duration:
                type: number
    TimeEntryCreate:
      description: Object for creating a time entry
      type: object
      required:
      - time_entry
      properties:
        time_entry:
          type: object
          required:
          - user_id
          - started_at
          - ended_at
          - description
          properties:
            user_id:
              type: string
            started_at:
              type: string
            ended_at:
              type: string
            description:
              type: string
            contact_id:
              type: string
            project_id:
              type: string
            detail_id:
              type: string
            billable:
              type: boolean
            paused_duration:
              type: number
    User:
      description: Object describing a user associated with the account.
      type: object
      properties:
        id:
          type: string
          description: The ID of the user.
        email:
          type: string
          description: The email address of the user.
        name:
          type: string
          description: The name of the user.
        time_zone:
          type: string
          description: The time zone of the user (e.g., "Europe/Amsterdam").
        language:
          type: string
          description: The language preference of the user (e.g., "nl").
        is_admin:
          type: boolean
          description: Indicates if the user has administrative privileges.
        created_at:
          type: string
          description: The timestamp when the user was created.
        updated_at:
          type: string
          description: The timestamp when the user was last updated.
        email_validated:
          type: boolean
          description: Indicates if the user’s email address has been validated.
        user_type:
          type: string
          enum:
          - owner
          - employee
          - accountant
          description: The type of user (e.g., "owner", "employee", or "accountant").
        permissions:
          type: array
          items:
            type: string
            enum:
            - sales_invoices
            - documents
            - estimates
            - bank
            - settings
            - ownership
            - time_entries
          description: List of permissions granted to the user.
      example:
        id: '446241518578041973'
        name: Mo Neybird
        created_at: 2025-02-17T10:44:56.902Z
        updated_at: 2025-02-17T10:44:57.128Z
        email: info@moneybird.nl
        email_validated: true
        language: nl
        time_zone: Europe/Amsterdam
        user_type: owner
        permissions:
        - sales_invoices
        - documents
        - estimates
        - bank
        - settings
        - ownership
        - time_entries
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://moneybird.com/oauth/authorize
          tokenUrl: https://moneybird.com/oauth/token
          refreshUrl: https://moneybird.com/oauth/token
          scopes:
            sales_invoices: Access to sales invoices
            documents: Access to documents
            estimates: Access to estimates
            bank: Access to bank information
            time_entries: Access to time entries
            settings: Access to settings
    ApiToken:
      type: http
      scheme: bearer
      description: An API token is only meant for personal use. You can obtain one from https://moneybird.com/user/applications/new
  responses: {}
  parameters: {}
security:
- ApiToken: []
- OAuth2: []
tags:
- name: administrations
  externalDocs:
    url: https://developer.moneybird.com/api/administration/
- name: contacts
  externalDocs:
    url: https://developer.moneybird.com/api/contacts/
- name: custom_fields
  externalDocs:
    url: https://developer.moneybird.com/api/custom_fields/
- name: identities
  externalDocs:
    url: https://developer.moneybird.com/api/identities/
- name: projects
  externalDocs:
    url: https://developer.moneybird.com/api/projects/
- name: purchase_invoices
  externalDocs:
    url: https://developer.moneybird.com/api/documents_purchase_invoices/
- name: time_entries
  externalDocs:
    url: https://developer.moneybird.com/api/time_entries/
- name: users
  externalDocs:
    url: https://developer.moneybird.com/api/users/
- name: verifications
  externalDocs:
    url: https://developer.moneybird.com/api/verifications/
